#from pre import utils
from os.path import join
import configparser
import subprocess


exp_dir = config['experiment_directory']
exp_conf_path = config.get('experiment_config','logs/config.cfg')
exp_conf_path = join(exp_dir, exp_conf_path)
exp_conf = configparser.ConfigParser()
exp_conf.read(exp_conf_path)

experiment_name = exp_conf.get('experiment','experiment name')
output_dir = join(config['output_directory'], experiment_name)
sections = exp_conf.options('sections')


def get_gpu():
    result = subprocess.run(['sinfo -p gpu | grep idle'],shell=True,capture_output=True,text=True)
    gpu_available = 0
    if 'pe2dg2' in result.stdout:
        gpu_available = 1

    return gpu_available

rule all:
    input:
        expand('{dir}/masks/{s}.tiff', dir = output_dir, s = sections)

rule fix_lighting:
    input:
        {exp_conf_path},
    params:
        save_path = join(output_dir,'processed_zarr'),
        section = '{sections}'
    output:
        directory('{output_dir}/processed_zarr/{sections}.zarr')
    conda:
        'envs/pyseq-image.yaml'
    script:
        'scripts/preprocess.py'

if get_gpu():
    cluster_config.update({'unmix':config['gpu_spec']})

rule unmix:
    input:
        directory('{output_dir}/processed_zarr/{sections}.zarr')
    output:
        directory('{output_dir}/final_zarr/{sections}.zarr')
    params:
        max_iter = config.get('unmix',{'max_iter':100}).get('max_iter')
#    resources:
#        mem_mb = 32000
    conda:
        'envs/unmix_gpu.yaml'
    script:
        'scripts/unmix.py'

if get_gpu():
    cluster_config.update({'segmentation':config['gpu_spec']})

rule segmentation:
    input:
        directory('{output_dir}/final_zarr/{sections}.zarr')
    output:
       '{output_dir}/masks/{sections}.tiff'
    resources:
        mem_mb = 32000
    conda:
        'envs/segmentation.yaml'
    script:
        'scripts/segmentation.py'


rule mean_intensity:
    input:
        directory('{output_dir}/final_zarr/{sections}.zarr'),
        '{output_dir}/masks/{sections}.tiff'
    
    output:
        '{output_dir}/intensities/{sections}.pkl'
    resources:
        mem_mb = 32000
    conda:
        'envs/mean_intensity.yaml'
    script:
        'scripts/mean_intensity.py'
        
        


rule anndata:
    input:
        '{output_dir}/masks/{sections}.tiff',
        '{output_dir}/intensities/{sections}.pkl'
    
    output:
        '{output_dir}/anndata/{sections}.h5ad'
        '{output_dir}/centroid/{sections}.csv'
        '{output_dir}/uns/{sections}.npy'
        
    resources:
        mem_mb = 32000
    conda:
        'envs/make_anndata.yaml'
    script:
        'scripts/make_anndata.py'
        
        


#rule spatial_neighborhood:
#    input:
#        '{output_dir}/masks/{sections}.tiff'
#        '{output_dir}/intensities/{sections}.pkl'
#    
#    output:
#       '{output_dir}/anndata/{sections}.h5ad'
#       '{output_dir}/centroid/{sections}.csv')
#       '{output_dir}/uns/{sections}.npy')
#        
#    resources:
#        mem_mb = 32000
#    conda:
#        'envs/spatial_neighborhood.yaml'
#    script:
#        'scripts/spatial_neighborhood.py'
        

# rule color unmixing

# final image object

# append mean_intensity to ann_data; region props, ann_data
# voronoi, graphs, spatial neighborhoods

# clustering and celltypes

# append cell types to ann_data
# output cells colored by cell_type (if we can)

########
#spatial neighborhood analysis


# rule clustering
rule celltype:
  input:
    '{output_dir}/tables/{sections}_prot.csv',
    '{output_dir}/tables/{sections}_param.csv'
  output:
    '{output_dir}/tables/{sections}.csv'
  resources:
    mem_mb = 32000
  conda:
    'envs/celltype.yaml'
  shell:
    '''
    Rscript scripts/celltype.R \
      --input_prot={input.prot} \
      --input_param={input.param} \
      --output={output} \
      --ref=config["reference"]["seurat"]
    '''
# append cell types to ann_data


# export image cells by ROI
