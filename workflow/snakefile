#from pre import utils
from os.path import join
import configparser
#configfile: 'config.yaml'

import os
print(os.environ['PATH'])

exp_dir = config['experiment_directory']
exp_conf_path = config.get('experiment_config','logs/config.cfg')
exp_conf_path = join(exp_dir, exp_conf_path)
exp_conf = configparser.ConfigParser()
exp_conf.read(exp_conf_path)

experiment_name = exp_conf.get('experiment','experiment name')
output_dir = join(config['output_directory'], experiment_name)
sections = exp_conf.options('sections')
print(config)
print(cluster_config)

def get_gpu():
    return 0

rule all:
    input:
        expand('{dir}/final_zarr/{s}.zarr', dir = output_dir, s = sections)

rule fix_lighting:
    input:
        {exp_conf_path},
    params:
        save_path = join(output_dir,'processed_zarr'),
        section = '{sections}'
    output:
        directory('{output_dir}/processed_zarr/{sections}.zarr')
    conda:
        'envs/pyseq-image.yaml'
    script:
        'scripts/preprocess.py'

if get_gpu():
    cluster_config.update({'unmix':config['gpu_spec']})

rule unmix:
    input:
        directory('{output_dir}/processed_zarr/{sections}.zarr')
    output:
        directory('{output_dir}/final_zarr/{sections}.zarr')
    params:
        max_iter = config.get('unmix',{'max_iter':100}).get('max_iter')
#    resources:
#        mem_mb = 32000
#    cluster:
#        partition = 'pe2'
    conda:
        'envs/unmix_gpu.yaml'
    script:
        'scripts/unmix.py'

# rule segmentation:
#     input:
#         directory('{output_dir}/final_zarr/{sections}.zarr')
#     output:
#         '{output_dir}/masks/{sections}.tiff'
#     resources:
#         mem_mb = 32000
#     conda:
#         'envs/cellpose.yaml'
#     script:
#         'scripts/segementation.py'


# rule color unmixing

# final image object

# rule segmenting

# make graph

# region props ann_data

# rule for convert ann data object

# append mean_intensity to ann_data

# rule clustering

# append cell types to ann_data

# spatial neighborhoods

# export image cells by ROI
