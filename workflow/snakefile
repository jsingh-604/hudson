#from pre import utils
from os.path import join
import configparser
import subprocess


exp_dir = config['experiment_directory']
exp_conf_path = config.get('experiment_config','logs/config.cfg')
exp_conf_path = join(exp_dir, exp_conf_path)
exp_conf = configparser.ConfigParser()
exp_conf.read(exp_conf_path)

experiment_name = exp_conf.get('experiment','experiment name')
output_dir = join(config['output_directory'], experiment_name)
sections = exp_conf.options('sections')


def get_gpu():
    result = subprocess.run(['sinfo -p gpu | grep idle'],shell=True,capture_output=True,text=True)
    gpu_available = 0
    if 'pe2dg2' in result.stdout:
        gpu_available = 1

    return gpu_available

rule all:
    input:
        expand('{dir}/masks/{s}.tiff', dir = output_dir, s = sections)

rule fix_lighting:
    input:
        {exp_conf_path},
    params:
        save_path = join(output_dir,'processed_zarr'),
        section = '{sections}'
    output:
        directory('{output_dir}/processed_zarr/{sections}.zarr')
    conda:
        'envs/pyseq-image.yaml'
    script:
        'scripts/preprocess.py'

if get_gpu():
    cluster_config.update({'unmix':config['gpu_spec']})

rule unmix:
    input:
        directory('{output_dir}/processed_zarr/{sections}.zarr')
    output:
        directory('{output_dir}/final_zarr/{sections}.zarr')
    params:
        max_iter = config.get('unmix',{'max_iter':100}).get('max_iter')
#    resources:
#        mem_mb = 32000
    conda:
        'envs/unmix_gpu.yaml'
    script:
        'scripts/unmix.py'

if get_gpu():
    cluster_config.update({'segmentation':config['gpu_spec']})

rule segmentation:
    input:
        directory('{output_dir}/final_zarr/{sections}.zarr')
    output:
        '{output_dir}/masks/{sections}.tiff'
    resources:
        mem_mb = 32000
    conda:
        'envs/cellpose.yaml'
    script:
        'scripts/segmentation.py'


# append mean_intensity to ann_data; region props, ann_data
# voronoi, graphs, spatial neighborhoods

# clustering and celltypes

# append cell types to ann_data
# output cells colored by cell_type (if we can)

########
#spatial neighborhood analysis








# export image cells by ROI
